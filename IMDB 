{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8cc0b1b-85cb-4d62-be16-46e251499d04",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to our program! Here you will be able to learn more about your favourite movies and TV shows.\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Import the data from IMDB database through the Cinemagoer package\n",
    "from imdb import Cinemagoer\n",
    "\n",
    "# Creating an instance of the Cinemagoer class and the global variable movie \n",
    "ia = Cinemagoer()\n",
    "movie = ()\n",
    "\n",
    "# Source used to see how to install the package: https://cinemagoer.readthedocs.io/en/latest/#\n",
    "\n",
    "def checkinput(numcheck):   \n",
    "    while numcheck.isdigit()==False:\n",
    "        numcheck = input(\"Error - you can only enter a number (integer), please try again: \")\n",
    "    return numcheck\n",
    "\n",
    "#checks if the number is 1,2,3,4 or 5 if not user stuck in loop\n",
    "def check14(num):\n",
    "    while int(num) not in range(1,6):\n",
    "          num = input(\"Error - You must select one of the options by entering a number between 1 and 5, try again:\")\n",
    "    return num\n",
    "\n",
    "#function that forces the user to enter y or n\n",
    "def checkyesno(userinput):\n",
    "    while str(userinput.upper()) not in [\"Y\", \"N\"]:\n",
    "        print(userinput.upper())\n",
    "        userinput = str(input(\"ERROR - the answer must be y or n, please select one of these options: \"))\n",
    "    return userinput.upper()\n",
    "\n",
    "# Welcome of the program\n",
    "print('Welcome to our program! Here you will be able to learn more about your favourite movies and TV shows.')\n",
    "print('\\n')\n",
    "\n",
    "# Creating a function for the entire program\n",
    "def step():\n",
    "    \n",
    "# Creating a function for the first part of the program\n",
    "\n",
    "    def step1():\n",
    "\n",
    "# User writes down the name of a movie/series\n",
    "        name = str(input('Please enter the title of a movie or series you would like to know more about: '))\n",
    "\n",
    "\n",
    "# Searching the input name in the IMDB database, used the following source to see how to do it: https://cinemagoer.readthedocs.io/en/latest/#\n",
    "\n",
    "        search = ia.search_movie(name)\n",
    "\n",
    "        print('\\n')\n",
    "        print('Here are the ones that correspond to that title:')\n",
    "\n",
    "\n",
    "# Loop for printing the name, the movie id and the release year of the \"top 20\" titles that correspond to the user input, saw how to do it through the source: https://www.geeksforgeeks.org/python-imdbpy-getting-title-from-searched-movie/\n",
    "# The \"try: except KeyError pass\" code is aimed at stopping the \"KeyError\" exceptions from being raised so that the program can continue to run if they occur, saw how to do it through the source: https://stackoverflow.com/questions/15653966/ignore-keyerror-and-continue-program\n",
    "        for i in range(len(search)):\n",
    "            id = search[i].movieID\n",
    "            try:\n",
    "                print(id + \" - \" + str(search[i]['title']) + \" (\" + str(search[i]['year']) + \")\")\n",
    "            except KeyError:\n",
    "                pass\n",
    "\n",
    "\n",
    "# In the next step, users can choose to go back and search for another movie/series or to see more information regarding a particular title in the list.\n",
    "# To go back they must enter a 0. To keep going, they must enter the movie id behind the title they are interested in.\n",
    "        print(\"\\n\")\n",
    "        \n",
    "        a = str(checkinput(input(\"Please enter the ID corresponding to the movie or 0 if you want to search for another movie: \")))\n",
    "        \n",
    "# By executing the function step1() if the input is equal to 0, the program will return to the beginning of the function where the user is again asked to enter the title of a movie/series   \n",
    "        \n",
    "        if int(a)==0:\n",
    "            step1()\n",
    "        else:\n",
    "            global movie\n",
    "            movie = a\n",
    "\n",
    "    step1 ()\n",
    "\n",
    "# User enters the movie id and \"ia.get_movie(movie)\" finds all the data for that particular movie, associating it to the object \"moviedata\"\n",
    "    moviedata = ia.get_movie(movie)\n",
    "\n",
    "# Creating a function for the second part of the program\n",
    "    def step2():\n",
    "\n",
    "        print(\"\\n\")\n",
    "        print('What would you like to know about this movie/show?')\n",
    "\n",
    "# The user decides which type of information they want to see for the chosen movie/series. They also have the possibility to go back and search for another title   \n",
    "        print(str(\"(1) \") + str(\"Plot Summary, Rating and Original Air Date\"))\n",
    "        print(str(\"(2) \") + str(\"Main Crew\"))\n",
    "        print(str(\"(3) \") + str(\"Main Cast\"))\n",
    "        print(str(\"(4) \") + str(\"I'd like to go back and search for something else.\"))\n",
    "        print(str(\"(5) \") + str(\"Exit the program.\"))\n",
    "\n",
    "\n",
    "# The user enters a number from 1-4 depending on the chosen course of action\n",
    "        b = int(check14(checkinput(input())))\n",
    "\n",
    "\n",
    "# Each movie in the database has several categories of information which can be acessed by coding moviedata['name of the data category'] \n",
    "# If the user chooses 1, they will see information for the categories plot summary, the movie rating and the original air date.\n",
    "# Saw how to do it through a video with link: https://www.youtube.com/watch?v=xKR3wHHgTzs\n",
    "        print(\"\\n\")\n",
    "        if b==1:\n",
    "            try:\n",
    "                print('Release Date:')\n",
    "                print(moviedata['original air date'])\n",
    "            except KeyError:\n",
    "                pass\n",
    "            print(\"\\n\")\n",
    "\n",
    "            try:\n",
    "                print('Rating:')\n",
    "                print(moviedata['rating'])\n",
    "            except KeyError:\n",
    "                pass\n",
    "            print(\"\\n\")\n",
    "\n",
    "            try:\n",
    "                print('Plot Summary:')\n",
    "                print(moviedata['plot outline'])\n",
    "            except KeyError:\n",
    "                pass\n",
    "\n",
    "            print(\"\\n\")\n",
    "            print(\"\\n\")\n",
    "            \n",
    "# Like before with step1(), by executing step2() by pressing enter the program will go back to the beginning of the function step2().\n",
    "# This method will be applied throughout this second part of the program to allow the user to go back to the beginning of the function, the menu page in a sense.            \n",
    "            input(\"Press Enter to continue...\")\n",
    "            step2()\n",
    "\n",
    "\n",
    "# If the user chooses 2, they will see information for the categories director, writer, cinematographer and music composer\n",
    "# For the code to work in this section, it wasn't enough to code \"print(moviedata['director'])\" for example, we needed a for loop.\n",
    "# Saw how to do it through the source: https://cinemagoer.readthedocs.io/en/latest/#\n",
    "        if b==2:\n",
    "            print('Directed by:')\n",
    "            try:\n",
    "                for director in moviedata['director']:\n",
    "                    print(director['name'])\n",
    "            except KeyError:\n",
    "                pass\n",
    "            print('\\n')\n",
    "\n",
    "\n",
    "            print('Screenplay written by:')\n",
    "            try:\n",
    "                for writer in moviedata['writer']:\n",
    "                    print(writer['name'])\n",
    "            except KeyError:\n",
    "                pass\n",
    "            print('\\n')\n",
    "\n",
    "\n",
    "            print('Cinematography by:')\n",
    "            try:\n",
    "                for cine in moviedata['cinematographer']:\n",
    "                    print(cine['name'])\n",
    "            except KeyError:\n",
    "                pass\n",
    "            print('\\n')\n",
    "\n",
    "\n",
    "            print('Music by:')\n",
    "            try:\n",
    "                for music in moviedata['composer']:\n",
    "                    print(music['name'])\n",
    "            except KeyError:\n",
    "                pass\n",
    "\n",
    "\n",
    "# This section aimed at giving the user the possibility to see 10 other movies by the same director\n",
    "            print('\\n')\n",
    "            print('If you would like to see other titles by the same director, please type Y. If you like to go back, type N.')\n",
    "            \n",
    "# Users input Y if they want to see the other 10 movies, or N if they want to go back to the previous page\n",
    "            c = checkyesno(input())\n",
    "            if (c=='Y'):\n",
    "\n",
    "# Here we use a for loop to search in the moviedata dataset for the name of the director again\n",
    "# Then, we will create a new object \"director\" with all the data regarding the director and store the data inside the filmography category of the director in the object \"filmography\"\n",
    "# Finally, we will extract the data from this object and print the top 10 other movies by the director\n",
    "# Saw how to do it through the source: https://stackoverflow.com/questions/29642595/get-list-of-movies-directed-by-director-imdbpy\n",
    "                try:\n",
    "                    for i in moviedata['director']:\n",
    "                        director = ia.search_person(i[\"name\"])[0]\n",
    "                        ia.update(director)\n",
    "                        filmography = director.get('filmography')\n",
    "                        print (\"Other movies directed by %s:\" % director)\n",
    "                        for movie_name in filmography[\"director\"][:10]:\n",
    "                            print (movie_name)\n",
    "                    print(\"\\n\")\n",
    "                    print(\"\\n\")\n",
    "                    input(\"Press Enter to continue...\")\n",
    "                    step2()\n",
    "                except KeyError:\n",
    "                    pass\n",
    "                \n",
    "            if (c=='N'):\n",
    "                step2()\n",
    "\n",
    "\n",
    "# If the user chooses 3, they will see information for the category cast, showing the name of the top 10 cast members of this movie, with their respective character's name in front.\n",
    "# Saw how to do it through the source: https://stackoverflow.com/questions/39059530/imdbpy-get-the-stars-of-a-movie\n",
    "        print(\"\\n\")\n",
    "        if b==3:\n",
    "            print('Main Cast:')\n",
    "            cast = moviedata.get('cast')\n",
    "            for actor in cast[:10]:\n",
    "                print (str(actor['name']) + \" as \" + str(actor.currentRole))\n",
    "\n",
    "            print(\"\\n\")\n",
    "            print(\"\\n\")\n",
    "            input(\"Press Enter to continue...\")\n",
    "            step2()\n",
    "\n",
    "# If the user chooses 4, they will go back to the beginning of step(), where they will be able to once again enter the name of a movie/series  \n",
    "        if b==4:\n",
    "            step()\n",
    "            \n",
    "# If the user chooses 5, the program will come to an end.\n",
    "        if b==5:\n",
    "            exit()\n",
    "\n",
    "    step2()\n",
    "step()\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff71e62d-d9dd-4f96-873e-ffd012504fa0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
